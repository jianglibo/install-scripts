<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>

<configuration>
<!--
<property>
  <name>hive.zookeeper.quorum</name>
  <value/>
  <description>
    List of ZooKeeper servers to talk to. This is needed for:
    1. Read/write locks when hive.lock.manager is set to
    org.apache.hadoop.hive.ql.lockmgr.zookeeper.ZooKeeperHiveLockManager,
    2. When HiveServer2 supports service discovery via Zookeeper.
    3. For delegation token storage if zookeeper store is used, if
    hive.cluster.delegation.token.store.zookeeper.connectString is not set
    4. LLAP daemon registry service
  </description>
</property>
-->
<property>
  <name>hive.server2.transport.mode</name>
  <value>binary</value>
  <description>
    Expects one of [binary, http].
    Transport mode of HiveServer2.
  </description>
</property>

<property>
  <name>hive.server2.webui.port</name>
  <value>10002</value>
  <description>The port the HiveServer2 WebUI will listen on. This can beset to 0 or a negative integer to disable the web UI</description>
</property>


<property>
    <name>hive.server2.thrift.port</name>
    <value>10000</value>
    <description>Port number of HiveServer2 Thrift interface when hive.server2.transport.mode is 'binary'.</description>
</property>

<property>
    <name>hive.querylog.location</name>
    <value>${system:java.io.tmpdir}/${system:user.name}</value>
    <description>Location of Hive run time structured log file</description>
</property>

<property>
    <name>hive.log4j.file</name>
    <value/>
    <description>
      Hive log4j configuration file.
      If the property is not set, then logging will be initialized using hive-log4j2.properties found on the classpath.
      If the property is set, the value must be a valid URI (java.net.URI, e.g. "file:///tmp/my-logging.xml"),
      which you can then extract a URL from and pass to PropertyConfigurator.configure(URL).
    </description>
</property>

<!--
<property>
    <name>hive.server2.logging.operation.log.location</name>
    <value>${system:java.io.tmpdir}/${system:user.name}/operation_logs</value>
    <description>Top level directory where operation logs are stored if logging functionality is enabled</description>
</property>
-->

<property>
  <name>hive.server2.authentication</name>
  <value>NONE</value>
  <description>
    Expects one of [nosasl, none, ldap, kerberos, pam, custom].
    Client authentication types.
      NONE: no authentication check
      LDAP: LDAP/AD based authentication
      KERBEROS: Kerberos/GSSAPI authentication
      CUSTOM: Custom authentication provider
              (Use with property hive.server2.custom.authentication.class)
      PAM: Pluggable authentication module
      NOSASL:  Raw transport
  </description>
</property>

  <property>
    <name>hive.security.authorization.enabled</name>
    <value>false</value>
    <description>enable or disable the Hive client authorization</description>
  </property>

  <property>
    <name>hive.server2.enable.doAs</name>
    <value>false</value>
    <description>
      Setting this property to true will have HiveServer2 execute
      Hive operations as the user making the calls to it.
    </description>
  </property>

<property>
  <name>hive.metastore.port</name>
  <value>9083</value>
  <description>Hive metastore listener port</description>
</property>

<property>
  <name>javax.jdo.option.ConnectionURL</name>
  <value>jdbc:derby:;databaseName=metastore_db;create=true</value>
  <description>
    JDBC connect string for a JDBC metastore.
    To use SSL to encrypt/authenticate the connection, provide database-specific SSL flag in the connection URL.
    For example, jdbc:postgresql://myhost/db?ssl=true for postgres database.
  </description>
</property>

<property>
  <name>hive.server2.thrift.http.port</name>
  <value>10001</value>
  <description>Port number of HiveServer2 Thrift interface when hive.server2.transport.mode is 'http'.</description>
</property>

</configuration>
